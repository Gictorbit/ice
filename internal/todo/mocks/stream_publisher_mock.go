// Code generated by MockGen. DO NOT EDIT.
// Source: publisher.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	domain "github.com/gictorbit/ice/internal/todo/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockStreamPublisher is a mock of StreamPublisher interface.
type MockStreamPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockStreamPublisherMockRecorder
}

// MockStreamPublisherMockRecorder is the mock recorder for MockStreamPublisher.
type MockStreamPublisherMockRecorder struct {
	mock *MockStreamPublisher
}

// NewMockStreamPublisher creates a new mock instance.
func NewMockStreamPublisher(ctrl *gomock.Controller) *MockStreamPublisher {
	mock := &MockStreamPublisher{ctrl: ctrl}
	mock.recorder = &MockStreamPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamPublisher) EXPECT() *MockStreamPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockStreamPublisher) Publish(ctx context.Context, todo *domain.TodoItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, todo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockStreamPublisherMockRecorder) Publish(ctx, todo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockStreamPublisher)(nil).Publish), ctx, todo)
}
